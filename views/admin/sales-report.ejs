<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="content-header">
    <div class="container">
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="content-title">Sales Report</h2>
            </div>
        </div>

        <!-- Filter Controls -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <form id="reportForm" class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Report Type</label>
                                <select class="form-select" id="reportType" name="reportType">
                                    <option value="daily" <%= reportType === 'daily' ? 'selected' : '' %>>Daily</option>
                                    <option value="weekly" <%= reportType === 'weekly' ? 'selected' : '' %>>Weekly</option>
                                    <option value="monthly" <%= reportType === 'monthly' ? 'selected' : '' %>>Monthly</option>
                                    <option value="yearly" <%= reportType === 'yearly' ? 'selected' : '' %>>Yearly</option>
                                    <option value="custom" <%= reportType === 'custom' ? 'selected' : '' %>>Custom Date Range</option>
                                </select>
                            </div>
                            
                            <div class="col-md-4" id="startDateContainer" style="display: none;">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="startDate" name="startDate" value="<%= startDate %>">
                            </div>
                            
                            <div class="col-md-4" id="endDateContainer" style="display: none;">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" id="endDate" name="endDate" value="<%= endDate %>">
                            </div>
                            
                            <div class="col-md-4">
                                <label class="form-label">&nbsp;</label>
                                <button type="submit" class="btn btn-primary d-block">Generate Report</button>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Download Report</h5>
                                        <div class="d-grid gap-2">
                                            <button type="button" class="btn btn-danger mb-2" onclick="window.downloadPDF()">
                                                <i class="material-icons align-middle"></i> 
                                                <span class="align-middle">Download PDF</span>
                                            </button>
                                            <button type="button" class="btn btn-success" onclick="window.downloadExcel()">
                                                <i class="material-icons align-middle"></i> 
                                                <span class="align-middle">Download Excel</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <h6 class="mb-2">Total Orders</h6>
                        <h4 class="mb-0" id="totalOrders"><%= summary.totalOrders %></h4>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h6 class="mb-2">Total Revenue</h6>
                        <h4 class="mb-0" id="totalAmount">₹<%= summary.totalAmount.toFixed(2) %></h4>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h6 class="mb-2">Average Order Value</h6>
                        <h4 class="mb-0" id="avgOrderValue">₹<%= summary.averageOrderValue.toFixed(2) %></h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Status -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <h6 class="mb-2">Cancelled Orders</h6>
                        <h4 class="mb-0"><%= summary.cancelledOrders %></h4>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card bg-secondary text-white">
                    <div class="card-body">
                        <h6 class="mb-2">Returned Orders</h6>
                        <h4 class="mb-0"><%= summary.returnedOrders %></h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Discount Breakdown -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h6 class="mb-2">Product Offers</h6>
                        <h4 class="mb-0 text-success">₹<%= (summary.productOfferDiscount || 0).toFixed(2) %></h4>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h6 class="mb-2">Category Offers</h6>
                        <h4 class="mb-0 text-success">₹<%= (summary.categoryOfferDiscount || 0).toFixed(2) %></h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Orders Table -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title mb-4">Order Details</h5>
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Date</th>
                                        <th>Customer</th>
                                        <th>Items</th>
                                        <th class="text-end">Amount</th>
                                        <th class="text-end">Final Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="ordersTableBody">
                                    <% orders.forEach(order => { %>
                                        <tr>
                                            <td><%= order._id %></td>
                                            <td>
                                                <% try { %>
                                                    <% const orderDate = new Date(order.createdOn); %>
                                                    <%= orderDate.toLocaleDateString('en-IN', { 
                                                        year: 'numeric', 
                                                        month: '2-digit', 
                                                        day: '2-digit' 
                                                    }) %>
                                                <% } catch(e) { %>
                                                    Invalid Date
                                                <% } %>
                                            </td>
                                            <td><%= order.userId?.name || 'N/A' %></td>
                                            <td><%= order.orderedItems?.length || 0 %> items</td>
                                            <td class="text-end">₹<%= order.totalPrice?.toFixed(2) || '0.00' %></td>
                                            <td class="text-end">₹<%= order.finalAmount?.toFixed(2) || '0.00' %></td>
                                            <td>
                                                <span class="badge rounded-pill bg-<%= 
                                                    order.status === 'Delivered' ? 'success' :
                                                    order.status === 'Processing' ? 'warning' :
                                                    order.status === 'Cancelled' ? 'danger' :
                                                    order.status === 'Returned' ? 'secondary' : 'primary'
                                                %>">
                                                    <%= order.status %>
                                                </span>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const reportType = document.getElementById('reportType');
    const startDateContainer = document.getElementById('startDateContainer');
    const endDateContainer = document.getElementById('endDateContainer');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');

    // Function to toggle date inputs visibility
    function toggleDateInputs() {
        if (reportType.value === 'custom') {
            startDateContainer.style.display = 'block';
            endDateContainer.style.display = 'block';
        } else {
            startDateContainer.style.display = 'none';
            endDateContainer.style.display = 'none';
        }
    }

    // Initial state
    toggleDateInputs();

    // Event listener for report type change
    reportType.addEventListener('change', function() {
        toggleDateInputs();
        
        // If not custom, submit the form immediately
        if (this.value !== 'custom') {
            const form = this.closest('form');
            if (form) {
                form.submit();
            }
        }
    });

    // Event listener for date changes in custom mode
    startDate.addEventListener('change', function() {
        if (reportType.value === 'custom' && endDate.value) {
            const form = this.closest('form');
            if (form) {
                form.submit();
            }
        }
    });

    endDate.addEventListener('change', function() {
        if (reportType.value === 'custom' && startDate.value) {
            const form = this.closest('form');
            if (form) {
                form.submit();
            }
        }
    });
});

document.getElementById('reportForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/admin/generate-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        if (result.success) {
            window.location.reload();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to generate report'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to generate report'
        });
    }
});

window.downloadPDF = async function() {
    const reportType = document.getElementById('reportType').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    // Validate dates for custom report
    if (reportType === 'custom' && (!startDate || !endDate)) {
        Swal.fire({
            icon: 'warning',
            title: 'Date Required',
            text: 'Please select both start and end dates for custom report'
        });
        return;
    }

    // Show loading state
    Swal.fire({
        title: 'Generating PDF',
        html: 'Please wait while we prepare your report...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    try {
        // Build URL with parameters
        let url = `/admin/download-report/pdf?reportType=${encodeURIComponent(reportType)}`;
        if (reportType === 'custom') {
            url += `&startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`;
        }

        // Fetch the PDF
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error('Failed to generate PDF');
        }

        // Get the blob from response
        const blob = await response.blob();
        
        // Create download link
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = `sales-report-${new Date().toISOString().split('T')[0]}.pdf`;
        
        // Append to body, click and remove
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Clean up the URL
        window.URL.revokeObjectURL(downloadUrl);

        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Your sales report has been downloaded.',
            timer: 2000,
            showConfirmButton: false
        });

    } catch (error) {
        console.error('Error downloading PDF:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again.'
        });
    }
};

window.downloadExcel = async function() {
    const reportType = document.getElementById('reportType').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    // Validate dates for custom report
    if (reportType === 'custom' && (!startDate || !endDate)) {
        Swal.fire({
            icon: 'warning',
            title: 'Date Required',
            text: 'Please select both start and end dates for custom report'
        });
        return;
    }

    // Show loading state
    Swal.fire({
        title: 'Generating Excel',
        html: 'Please wait while we prepare your report...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    try {
        // Build URL with parameters
        let url = `/admin/download-report/excel?reportType=${encodeURIComponent(reportType)}`;
        if (reportType === 'custom') {
            url += `&startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`;
        }

        // Fetch the Excel file
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error('Failed to generate Excel file');
        }

        // Get the blob from response
        const blob = await response.blob();
        
        // Create download link
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = `sales-report-${new Date().toISOString().split('T')[0]}.xlsx`;
        
        // Append to body, click and remove
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Clean up the URL
        window.URL.revokeObjectURL(downloadUrl);

        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Your Excel report has been downloaded.',
            timer: 2000,
            showConfirmButton: false
        });

    } catch (error) {
        console.error('Error downloading Excel:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again.'
        });
    }
};
</script>

<%- include("../../views/partials/admin/footer") %>
