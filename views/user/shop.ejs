<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">

    <style>
        .wishlist-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            z-index: 1;
            padding: 8px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.9);
            transition: all 0.3s ease;
        }
        
        .wishlist-btn:hover {
            background-color: rgba(255, 255, 255, 1);
            transform: scale(1.1);
        }

        .wishlist-btn i {
            color: #666;
            transition: color 0.3s ease;
        }

        .wishlist-btn i.fas {
            color: #ff4444;
        }

        .wishlist-btn:hover i {
            color: #ff4444;
        }

        .offer-details {
            font-size: 0.85rem;
            text-align: center;
            padding: 5px 0;
        }

        .offer-details small {
            display: block;
            line-height: 1.4;
        }

        .offer-details .text-success {
            color: #28a745;
            font-weight: 500;
        }

        .offer-details .text-muted {
            font-size: 0.8rem;
        }

        .product-badges .hot {
            background-color: #ff3d00;
            font-size: 0.9rem;
            padding: 5px 12px;
            border-radius: 15px;
            font-weight: 500;
        }

        /* Filter Styles */
        .category-link,
        .brand-link {
            text-decoration: none;
            display: block;
            padding: 8px 12px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .category-link:hover,
        .brand-link:hover {
            background-color: #f8f9fa;
            text-decoration: none;
        }

        .category-link.active,
        .brand-link.active {
            background-color: #e9ecef;
            font-weight: 500;
        }

        .filters-wrapper {
            padding: 1.5rem;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        }

        /* Loading animation */
        .loading {
            opacity: 0.5;
            pointer-events: none;
        }

        /* Product grid transition */
        .product-grid-4 {
            transition: opacity 0.3s ease;
        }
    </style>

</head>
<%-include("../../views/partials/user/header")%>

<!-- Shop Section -->
<div class="shop-container container-fluid py-5">
    <div class="row g-4 pt-5">
        <!-- Filters Column -->
        <div class="col-lg-2">
            <div class="filters-wrapper position-sticky glass-card" style="top: 4rem;">
                <!-- Category Section -->
                <div class="mb-4">
                    <h5 class="fw-bold mb-3">Category</h5>
                    <div class="category-list">
                        <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                            <% categories.forEach(function(cat) { %>
                                <div class="mb-2">
                                    <a href="#" class="text-dark category-link" data-category="<%= cat._id %>">
                                        <%= cat.name %>
                                    </a>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>

                <!-- Brands Section -->
                <div class="mb-4">
                    <h5 class="fw-bold mb-3">Brands</h5>
                    <div class="brands-list">
                        <% if (typeof brands !== 'undefined' && brands.length > 0) { %>
                            <% brands.forEach(function(brand) { %>
                                <div class="mb-2">
                                    <a href="#" class="text-dark brand-link" data-brand="<%= brand.brandName %>">
                                        <%= brand.brandName %>
                                    </a>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>

                <!-- Clear All Filters Button -->
                <div class="text-center">
                    <button type="button" class="btn btn-outline-danger clear-filters-btn" id="clearAllFilters">
                        <i class="fas fa-filter-circle-xmark me-2"></i>Reset Filters
                    </button>
                </div>

                <style>
                    .clear-filters-btn {
                        width: 100%;
                        padding: 10px;
                        border-radius: 8px;
                        font-weight: 500;
                        transition: all 0.3s ease;
                        background: linear-gradient(to right, #ffffff, #fff);
                        border: 2px solid #dc3545;
                        color: #dc3545;
                    }

                    .clear-filters-btn:hover {
                        background: linear-gradient(to right, #ff6b6b, #dc3545);
                        color: white;
                        border-color: transparent;
                        transform: translateY(-2px);
                        box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
                    }

                    .clear-filters-btn:active {
                        transform: translateY(0);
                        box-shadow: none;
                    }

                    .clear-filters-btn i {
                        font-size: 1.1em;
                        vertical-align: middle;
                    }
                </style>
            </div>
        </div>

        <!-- Main Content Column -->
        <div class="col-lg-10">
            <!-- Search Bar -->
            <div class="search-bar mb-4 glass-card p-3">
                <div class="row g-3">
                    <div class="col-md-8">
                        <div class="search-input-group">
                            <i class="fas fa-search search-icon"></i>
                            <input 
                                type="text" 
                                class="form-control search-control" 
                                id="searchInput"
                                placeholder="Search products..."
                            >
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select modern-select" id="sortSelect" name="sort">
                            <option value="">Sort by</option>
                            <option value="newest">New Arrivals</option>
                            <option value="priceHigh">Price: High to Low</option>
                            <option value="priceLow">Price: Low to High</option>
                            <option value="nameAsc">Name: A to Z</option>
                            <option value="nameDesc">Name: Z to A</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="row product-grid-4" id="products-container">
                <% products.forEach(product => { %>
                    <div class="col-lg-3 col-md-4 col-12 col-sm-6 product-item">
                        <div class="product-cart-wrap mb-30" data-product-name="<%= product.productName.toLowerCase() %>" data-product-description="<%= product.description.toLowerCase() %>" data-product-brand="<%= product.brand.toLowerCase() %>" data-product-price="<%= Number(product.salePrice) %>">
                            <div class="product-img-action-wrap">
                                <div class="product-img product-img-zoom">
                                    <a href="/productDetails?id=<%= product._id %>">
                                        <img class="default-img" 
                                            src="<%= product.productImage && product.productImage.length > 0 ? `/uploads/re-image/${product.productImage[0]}` : '/uploads/re-image/default.jpeg' %>"
                                            alt="<%= product.productName %>"
                                            loading="lazy">
                                    </a>
                                </div>
                                <div class="product-action-1">
                                    <button class="action-btn hover-up wishlist-btn" onclick="toggleWishlist(this, '<%= product._id %>')" data-product-id="<%= product._id %>">
                                        <% if (product.isInWishlist) { %>
                                            <i class="fas fa-heart"></i>
                                        <% } else { %>
                                            <i class="far fa-heart"></i>
                                        <% } %>
                                    </button>
                                </div>
                            </div>
                            <div class="product-content-wrap">
                                <h2><a href="/productDetails?id=<%= product._id %>"><%= product.productName %></a></h2>
                                <div class="rating-result" title="90%">
                                    <span>
                                        <span></span>
                                    </span>
                                </div>
                                <div class="product-price">
                                    <span>₹<%= product.salePrice %></span>
                                    <% if (product.regularPrice > product.salePrice) { %>
                                        <span class="old-price">₹<%= product.regularPrice %></span>
                                    <% } %>
                                </div>
                                <% if (product.effectiveOffer > 0) { %>
                                    <div class="product-badges product-badges-position product-badges-mrg">
                                        <span class="hot"><%= product.effectiveOffer %>% OFF</span>
                                    </div>
                                <% } %>
                                <div class="product-action-1 show">
                                    <% if (product.quantity > 0) { %>
                                        <a aria-label="Add To Cart" class="action-btn hover-up" href="#" onclick="event.preventDefault(); addToCart('<%= product._id %>')">
                                            <i class="fi-rs-shopping-bag-add"></i>
                                        </a>
                                    <% } else { %>
                                        <a aria-label="Out of Stock" class="action-btn hover-up out-of-stock" href="#" onclick="event.preventDefault(); showOutOfStockMessage()">
                                            <i class="fi-rs-shopping-bag-add"></i>
                                        </a>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>

            <!-- Modern Pagination -->
            <div class="pagination-container mt-5">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <% if (typeof hasPreviousPage !== 'undefined' && hasPreviousPage) { %>
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="<%= previousPage %>">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                        <% } %>

                        <% for(let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                <a class="page-link" href="#" data-page="<%= i %>">
                                    <%= i %>
                                </a>
                            </li>
                        <% } %>

                        <% if (typeof hasNextPage !== 'undefined' && hasNextPage) { %>
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="<%= nextPage %>">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<style>
    /* Modern Variables */
    :root {
        --primary-color: #2d3436;
        --secondary-color: #636e72;
        --accent-color: #0984e3;
        --background-color: #f5f6fa;
        --card-background: rgba(255, 255, 255, 0.9);
        --shadow-color: rgba(0, 0, 0, 0.1);
        --gradient-start: #6c5ce7;
        --gradient-end: #a363d9;
        --transition-speed: 0.3s;
    }

    /* Global Styles */
    body {
        background-color: var(--background-color);
        color: var(--primary-color);
    }

    /* Glass Card Effect */
    .glass-card {
        background: var(--card-background);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px var(--shadow-color);
        transition: transform var(--transition-speed), box-shadow var(--transition-speed);
    }

    .glass-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px var(--shadow-color);
    }

    /* Text Gradient */
    .text-gradient {
        background: linear-gradient(45deg, var(--gradient-start), var(--gradient-end));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 700;
    }

    /* Modern Search Input */
    .search-input-group {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 16px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--secondary-color);
    }

    .search-control {
        padding-left: 48px;
        height: 50px;
        border-radius: 12px;
        border: 2px solid transparent;
        transition: all var(--transition-speed);
    }

    .search-control:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 4px rgba(9, 132, 227, 0.1);
    }

    /* Modern Select */
    .modern-select {
        height: 50px;
        border-radius: 12px;
        border: 2px solid transparent;
        cursor: pointer;
        background-image: url("data:image/svg+xml,...");
        transition: all var(--transition-speed);
    }

    .modern-select:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 4px rgba(9, 132, 227, 0.1);
    }

    /* Product Card */
    .product-card {
        overflow: hidden;
    }

    .product-image-container {
        position: relative;
        padding-top: 100%;
        overflow: hidden;
    }

    .product-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform var(--transition-speed);
    }

    .product-card:hover .product-image {
        transform: scale(1.1);
    }

    /* Wishlist Button */
    .wishlist-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        z-index: 1;
        padding: 8px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s ease;
    }
        
    .wishlist-btn:hover {
        background-color: rgba(255, 255, 255, 1);
        transform: scale(1.1);
    }

    .wishlist-btn i {
        color: #666;
        transition: color 0.3s ease;
    }

    .wishlist-btn i.fas {
        color: #ff4444;
    }

    .wishlist-btn:hover i {
        color: #ff4444;
    }

    /* Stock Badge */
    .stock-badge {
        padding: 6px 12px;
        border-radius: 8px;
        font-size: 12px;
        font-weight: 600;
    }

    .in-stock {
        background-color: #d5f5e3;
        color: #27ae60;
    }

    .out-of-stock {
        background-color: #fde2e2;
        color: #e74c3c;
    }

    /* Product Title and Price */
    .product-title {
        font-size: 1rem;
        font-weight: 600;
        line-height: 1.4;
        margin-bottom: 8px;
        color: var(--primary-color);
    }

    .current-price {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--accent-color);
    }

    .original-price {
        font-size: 0.9rem;
        color: var(--secondary-color);
        text-decoration: line-through;
        margin-left: 8px;
    }

    /* Custom Range Slider */
    .range-slider {
        width: 100%;
        padding: 8px 0;
    }

    .custom-range {
        -webkit-appearance: none;
        width: 100%;
        height: 6px;
        border-radius: 3px;
        background: #dfe6e9;
        outline: none;
    }

    .custom-range::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--accent-color);
        cursor: pointer;
        transition: all var(--transition-speed);
    }

    .custom-range::-webkit-slider-thumb:hover {
        transform: scale(1.2);
    }

    /* Pagination */
    .pagination {
        gap: 8px;
    }

    .page-link {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px !important;
        border: none;
        color: var(--primary-color);
        transition: all var(--transition-speed);
    }

    .page-link:hover {
        background-color: var(--accent-color);
        color: white;
    }

    .page-item.active .page-link {
        background-color: var(--accent-color);
        color: white;
    }

    /* Animations */
    @keyframes heartBeat {
        0% { transform: scale(1); }
        50% { transform: scale(1.3); }
        100% { transform: scale(1); }
    }

    /* Hover Effects */
    .btn-hover-effect {
        position: relative;
        overflow: hidden;
        transition: all var(--transition-speed);
    }

    .btn-hover-effect::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: -100%;
        background: linear-gradient(
            120deg,
            transparent,
            rgba(255, 255, 255, 0.2),
            transparent
        );
        transition: all var(--transition-speed);
    }

    .btn-hover-effect:hover::after {
        left: 100%;
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .filters-wrapper {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            transform: translateY(100%);
            transition: transform var(--transition-speed);
        }

        .filters-wrapper.active {
            transform: translateY(0);
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Update price value display
    const priceRange = document.getElementById('priceRange');
    const priceValue = document.getElementById('priceValue');
    const clearCategoryBtn = document.getElementById('clearCategory');
    const sortSelect = document.getElementById('sortSelect');
    const searchInput = document.getElementById('searchInput');
    const productsContainer = document.getElementById('products-container');
    const productItems = document.querySelectorAll('.product-item');
    
    if(priceRange && priceValue) {
        priceRange.addEventListener('input', function() {
            priceValue.textContent = '₹' + this.value;
        });
    }

    // Handle search input
    if(searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchQuery = this.value.trim().toLowerCase();
                
                // Show/hide products based on search
                productItems.forEach(item => {
                    const productCard = item.querySelector('.product-cart-wrap');
                    const productName = productCard.dataset.productName;
                    const productDescription = productCard.dataset.productDescription;
                    const productBrand = productCard.dataset.productBrand;
                    
                    if (searchQuery === '' || 
                        productName.includes(searchQuery) || 
                        productDescription.includes(searchQuery) || 
                        productBrand.includes(searchQuery)) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });

                // Update visible count
                const visibleCount = document.querySelectorAll('.product-item[style=""]').length;
                updateResultCount(visibleCount);
            }, 300);
        });
    }

    // Handle sort selection
    if(sortSelect) {
        sortSelect.addEventListener('change', function() {
            const sortValue = this.value;
            const items = Array.from(productItems);
            
            items.sort((a, b) => {
                const cardA = a.querySelector('.product-cart-wrap');
                const cardB = b.querySelector('.product-cart-wrap');
                
                switch(sortValue) {
                    case 'priceHigh':
                        return parseFloat(cardB.dataset.productPrice) - parseFloat(cardA.dataset.productPrice);
                    case 'priceLow':
                        return parseFloat(cardA.dataset.productPrice) - parseFloat(cardB.dataset.productPrice);
                    case 'nameAsc':
                        return cardA.dataset.productName.localeCompare(cardB.dataset.productName);
                    case 'nameDesc':
                        return cardB.dataset.productName.localeCompare(cardA.dataset.productName);
                    default:
                        return 0;
                }
            });
            
            // Re-append sorted items
            items.forEach(item => productsContainer.appendChild(item));
        });
    }

    // Function to update result count
    function updateResultCount(count) {
        const countDisplay = document.createElement('div');
        countDisplay.className = 'text-muted mb-3';
        countDisplay.textContent = `${count} products found`;
        
        // Remove existing count display if any
        const existingCount = document.querySelector('.text-muted.mb-3');
        if (existingCount) {
            existingCount.remove();
        }
        
        // Insert count before products container
        productsContainer.parentNode.insertBefore(countDisplay, productsContainer);
    }

    // Handle clear category button
    if(clearCategoryBtn) {
        clearCategoryBtn.addEventListener('click', function() {
            // Uncheck all category radio buttons
            document.querySelectorAll('input[name="category"]').forEach(input => {
                input.checked = false;
            });
            
            // Get current sort value
            const currentSort = sortSelect.value;
            
            // Build URL with only sort if present
            let url = '/shop';
            if(currentSort) {
                url += '?sort=' + currentSort;
            }
            
            // Redirect to shop with only sort parameter
            window.location.href = url;
        });
    }

    // Handle filter form submission
    const filterForm = document.getElementById('filterForm');
    if(filterForm) {
        filterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const selectedCategory = formData.get('category');
            const price = formData.get('price');
            const sort = sortSelect.value;

            // Build query string
            const params = new URLSearchParams();
            
            // Add selected filters to query params
            if(selectedCategory) {
                params.append('category', selectedCategory);
            }
            if(price && price !== '100000') {
                params.append('price', price);
            }
            if(sort) {
                params.append('sort', sort);
            }

            // Determine which endpoint to use
            let endpoint = '/shop';
            if(selectedCategory) {
                endpoint = '/filter';
            } else if(price && price !== '100000') {
                endpoint = '/filterPrice';
            }

            // Redirect with query parameters
            window.location.href = endpoint + (params.toString() ? '?' + params.toString() : '');
        });
    }
});

function addToCart(productId) {
    console.log('Adding product to cart:', productId);
    fetch('/addToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId: productId })
    })
    .then(response => {
        console.log('Server response:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Response data:', data);
        if (data.status !== false) {
            Swal.fire({
                title: 'Success!',
                text: 'Product added to cart successfully!',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
            });
        } else {
            throw new Error(data.message || 'Failed to add product to cart');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: error.message || 'An error occurred while adding to cart',
            icon: 'error'
        });
    });
}

function showOutOfStockMessage() {
    Swal.fire({
        title: 'Out of Stock',
        text: 'Sorry, this product is currently out of stock',
        icon: 'info'
    });
}

function toggleWishlist(button, productId) {
    fetch('/add-to-wishlist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId: productId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Toggle heart icon
            const heartIcon = button.querySelector('i');
            if (data.action === 'added') {
                heartIcon.classList.remove('far');
                heartIcon.classList.add('fas', 'text-danger');
            } else {
                heartIcon.classList.remove('fas', 'text-danger');
                heartIcon.classList.add('far');
            }
            
            // Show success message
            Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
            });
        } else {
            Swal.fire({
                title: 'Info',
                text: data.message,
                icon: 'info',
                timer: 1500,
                showConfirmButton: false
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to update wishlist. Please try again.',
            icon: 'error',
            timer: 1500,
            showConfirmButton: false
        });
    });
}

let currentFilters = {
    category: null,
    brand: null
};

const productsContainer = document.getElementById('products-container');
const categoryLinks = document.querySelectorAll('.category-link');
const brandLinks = document.querySelectorAll('.brand-link');
const clearAllFiltersBtn = document.getElementById('clearAllFilters');

// Function to update active state
function updateActiveState(elements, clickedElement) {
    elements.forEach(el => el.classList.remove('active'));
    if (clickedElement) {
        clickedElement.classList.add('active');
    }
}

// Function to apply filters and update products
async function applyFilters(page = 1) {
    try {
        // Show loading state
        productsContainer.classList.add('loading');

        // Build query string
        const queryParams = new URLSearchParams();
        if (currentFilters.category) queryParams.append('categoryId', currentFilters.category);
        if (currentFilters.brand) queryParams.append('brand', currentFilters.brand);
        
        // Add sorting parameter
        const sortValue = document.getElementById('sortSelect').value;
        if (sortValue) {
            queryParams.append('sort', sortValue);
        }

        // Add pagination parameter
        queryParams.append('page', page);

        // Fetch filtered products
        const response = await fetch(`/filter-by-category?${queryParams.toString()}`, {
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        const data = await response.json();

        if (data.success) {
            // Update products container with new products
            productsContainer.innerHTML = data.products.map(product => `
                <div class="col-lg-3 col-md-4 col-12 col-sm-6 product-item">
                    <div class="product-cart-wrap mb-30" data-product-name="${product.productName.toLowerCase()}" data-product-description="${product.description.toLowerCase()}" data-product-brand="${product.brand.toLowerCase()}" data-product-price="${Number(product.salePrice)}">
                        <div class="product-img-action-wrap">
                            <div class="product-img product-img-zoom">
                                <a href="/productDetails?id=${product._id}">
                                    <img class="default-img" 
                                        src="${product.productImage && product.productImage.length > 0 ? `/uploads/re-image/${product.productImage[0]}` : '/uploads/re-image/default.jpeg'}"
                                        alt="${product.productName}"
                                        loading="lazy">
                                </a>
                            </div>
                            <div class="product-action-1">
                                <button class="action-btn hover-up wishlist-btn" onclick="toggleWishlist(this, '${product._id}')" data-product-id="${product._id}">
                                    <i class="${product.isInWishlist ? 'fas' : 'far'} fa-heart"></i>
                                </button>
                            </div>
                        </div>
                        <div class="product-content-wrap">
                            <h2><a href="/productDetails?id=${product._id}">${product.productName}</a></h2>
                            <div class="product-price">
                                <span class="new-price">₹${product.salePrice}</span>
                                ${product.effectiveOffer > 0 ? `
                                    <span class="old-price">₹${product.regularPrice}</span>
                                    <div class="offer-details">
                                        <small class="text-success">${product.effectiveOffer}% OFF</small>
                                    </div>
                                ` : ''}
                            </div>
                            <div class="product-action-1 mt-2">
                                <button onclick="addToCart('${product._id}')" class="btn btn-sm btn-success">Add to Cart</button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            // Update pagination
            if (data.pagination) {
                updatePagination(data.pagination);
            }
        } else {
            throw new Error(data.error || 'Failed to filter products');
        }
    } catch (error) {
        console.error('Error applying filters:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to filter products. Please try again.',
            icon: 'error',
            timer: 1500,
            showConfirmButton: false
        });
    } finally {
        // Remove loading state
        productsContainer.classList.remove('loading');
    }
}

// Function to update pagination UI
function updatePagination(pagination) {
    const paginationContainer = document.querySelector('.pagination-container');
    if (!paginationContainer) return;

    const { currentPage, totalPages, hasNextPage, hasPreviousPage } = pagination;

    let paginationHTML = `
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item ${!hasPreviousPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" ${!hasPreviousPage ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
    `;

    // Add page numbers
    for (let i = 1; i <= totalPages; i++) {
        paginationHTML += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
        `;
    }

    paginationHTML += `
                <li class="page-item ${!hasNextPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" ${!hasNextPage ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    `;

    paginationContainer.innerHTML = paginationHTML;

    // Add click handlers for pagination
    const pageLinks = paginationContainer.querySelectorAll('.page-link');
    pageLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const pageNum = parseInt(this.dataset.page);
            if (!isNaN(pageNum)) {
                applyFilters(pageNum);
                // Scroll to top of products
                productsContainer.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
}

// Add event listener for sort select
document.getElementById('sortSelect').addEventListener('change', () => applyFilters(1));

// Category filtering
categoryLinks.forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();
        const categoryId = this.dataset.category;
        
        if (currentFilters.category === categoryId) {
            // If clicking the same category, remove the filter
            currentFilters.category = null;
            updateActiveState(categoryLinks, null);
        } else {
            // Apply new category filter
            currentFilters.category = categoryId;
            updateActiveState(categoryLinks, this);
        }
        
        applyFilters(1);
    });
});

// Brand filtering
brandLinks.forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();
        const brandName = this.dataset.brand;
        
        if (currentFilters.brand === brandName) {
            // If clicking the same brand, remove the filter
            currentFilters.brand = null;
            updateActiveState(brandLinks, null);
        } else {
            // Apply new brand filter
            currentFilters.brand = brandName;
            updateActiveState(brandLinks, this);
        }
        
        applyFilters(1);
    });
});

// Clear all filters
clearAllFiltersBtn.addEventListener('click', function() {
    currentFilters.category = null;
    currentFilters.brand = null;
    updateActiveState(categoryLinks, null);
    updateActiveState(brandLinks, null);
    document.getElementById('sortSelect').value = '';
    applyFilters(1);
});

document.addEventListener('DOMContentLoaded', function() {
    // Handle pagination clicks
    document.querySelectorAll('.pagination .page-link').forEach(link => {
        link.addEventListener('click', async function(e) {
            e.preventDefault();
            const page = this.dataset.page;
            await loadPage(page);
        });
    });

    async function loadPage(page) {
        try {
            // Show loading state
            document.getElementById('products-container').innerHTML = '<div class="text-center w-100"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

            // Get current URL and update page parameter
            const url = new URL(window.location.href);
            url.searchParams.set('page', page);

            // Fetch products for the new page
            const response = await fetch(url);
            const html = await response.text();

            // Create a temporary container
            const tempContainer = document.createElement('div');
            tempContainer.innerHTML = html;

            // Update products container
            const newProducts = tempContainer.querySelector('#products-container').innerHTML;
            document.getElementById('products-container').innerHTML = newProducts;

            // Update pagination
            const newPagination = tempContainer.querySelector('.pagination-container').innerHTML;
            document.querySelector('.pagination-container').innerHTML = newPagination;

            // Update URL without refresh
            history.pushState({}, '', url);

            // Scroll to top of products
            document.getElementById('products-container').scrollIntoView({ behavior: 'smooth' });

            // Reattach pagination event listeners
            attachPaginationListeners();
        } catch (error) {
            console.error('Error loading page:', error);
            // Show error message to user
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load products. Please try again.'
            });
        }
    }

    function attachPaginationListeners() {
        document.querySelectorAll('.pagination .page-link').forEach(link => {
            link.addEventListener('click', async function(e) {
                e.preventDefault();
                const page = this.dataset.page;
                await loadPage(page);
            });
        });
    }
});
</script>

<%-include("../../views/partials/user/footer")%>