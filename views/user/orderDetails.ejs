<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen py-8">
        <div class="max-w-6xl mx-auto px-4">
            <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                <!-- Header -->
                <div class="bg-gradient-to-r from-blue-600 to-blue-800 p-6 text-white">
                    <div class="flex justify-between items-center">
                        <div>
                            <h1 class="text-2xl font-bold">Order #<%= order.orderId %></h1>
                            <p class="mt-1 text-blue-100">
                                Placed on <%= new Date(order.createdOn).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </p>
                        </div>
                        <div class="px-4 py-2 rounded-full <%= 
                            order.status === 'pending' ? 'bg-yellow-500' :
                            order.status === 'delivered' ? 'bg-green-500' :
                            order.status === 'cancelled' ? 'bg-red-500' : 'bg-blue-500'
                        %>">
                            <%= order.status %>
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="p-6">
                    <!-- Quick Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <div class="flex items-center">
                                <i class="fas fa-credit-card text-blue-600 text-xl mr-3"></i>
                                <div>
                                    <p class="text-sm text-gray-600">Payment Method</p>
                                    <p class="font-semibold"><%= order.paymentMethod %></p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-green-50 p-4 rounded-lg">
                            <div class="flex items-center">
                                <i class="fas fa-money-bill text-green-600 text-xl mr-3"></i>
                                <div>
                                    <p class="text-sm text-gray-600">Total Amount</p>
                                    <p class="font-semibold">₹<%= order.finalAmount %></p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-purple-50 p-4 rounded-lg">
                            <div class="flex items-center">
                                <i class="fas fa-box text-purple-600 text-xl mr-3"></i>
                                <div>
                                    <p class="text-sm text-gray-600">Payment Status</p>
                                    <p class="font-semibold"><%= order.payment_status %></p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Order Items -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Order Items</h2>
                        <div class="space-y-4">
                            <% order.orderedItems.forEach(item => { %>
                                <div class="flex items-center p-4 border rounded-lg hover:shadow-md transition-shadow">
                                    <div class="w-16 h-16 overflow-hidden rounded-lg mr-4">
                                        <% if (item.id && item.id.productImage && item.id.productImage.length > 0) { %>
                                            <img src="/uploads/re-image/<%= item.id.productImage[0] %>" 
                                                 alt="<%= item.name %>"
                                                 class="w-full h-full object-cover">
                                        <% } else { %>
                                            <img src="/uploads/re-image/default-product.jpg" 
                                                 alt="Default Product"
                                                 class="w-full h-full object-cover">
                                        <% } %>
                                    </div>
                                    <div class="flex-1">
                                        <h3 class="font-medium"><%= item.name %></h3>
                                        <p class="text-sm text-gray-500">Quantity: <%= item.quantity %></p>
                                    </div>
                                    <div class="text-right">
                                        <p class="font-medium">₹<%= item.price %></p>
                                        <span class="inline-block px-3 py-1 rounded-full text-xs <%= 
                                            item.status.toLowerCase() === 'delivered' ? 'bg-green-500' :
                                            item.status.toLowerCase() === 'cancelled' ? 'bg-red-500' :
                                            'bg-blue-500'
                                        %> text-white mt-2">
                                            <%= item.status %>
                                        </span>
                                    </div>
                                    <div class="ml-4">
                                        <% if (item.status.toLowerCase() === 'delivered') { %>
                                            <button onclick="returnProduct('<%= order._id %>', '<%= item.id._id %>')"
                                                    class="px-3 py-1 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600">
                                                Return
                                            </button>
                                        <% } else if (item.status.toLowerCase() !== 'cancelled') { %>
                                            <button onclick="cancelProduct('<%= order._id %>', '<%= item.id._id %>')"
                                                    class="px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600">
                                                Cancel
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>

                    <!-- Order Summary -->
                    <div class="bg-gray-50 p-6 rounded-lg mt-8">
                        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
                        <% if (order.discount && order.discount > 0) { %>
                            <div class="bg-yellow-50 p-4 rounded-lg mb-4">
                                <div class="flex items-center">
                                    <i class="fas fa-tag text-yellow-600 text-xl mr-3"></i>
                                    <div>
                                        <p class="text-sm text-gray-600">Coupon Discount</p>
                                        <p class="font-semibold">₹<%= order.discount %></p>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                        <div class="flex justify-between items-center">
                            <p class="text-gray-600">Total Amount</p>
                            <p class="font-semibold text-xl">₹<%= order.finalAmount %></p>
                        </div>
                    </div>

                    <!-- Shipping Address -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Shipping Address</h2>
                        <div class="p-4 border rounded-lg bg-gray-50">
                            <p class="font-medium"><%= order.shippingAddress.name %></p>
                            <p class="text-gray-600"><%= order.shippingAddress.phone %></p>
                            <p class="text-gray-600">
                                <%= order.shippingAddress.landmark %>,
                                <%= order.shippingAddress.city %>,
                                <%= order.shippingAddress.state %> - 
                                <%= order.shippingAddress.pincode %>
                            </p>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex justify-between items-center mt-8 pt-6 border-t">
                        <a href="/userProfile" class="flex items-center text-gray-600 hover:text-gray-800">
                            <i class="fas fa-arrow-left mr-2"></i>
                            Back to Orders
                        </a>
                        <div class="flex space-x-4">
                            <% if (order.paymentMethod && 
                                  order.paymentMethod.toLowerCase() === 'razorpay' && 
                                  order.orderedItems[0].status.toLowerCase() === 'pending' &&
                                  (!order.payment_status || order.payment_status.toLowerCase() !== 'completed')) { %>
                                <button onclick="retryPayment('<%= order._id %>', '<%= order.finalAmount %>')"
                                        class="flex items-center px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600">
                                    <i class="fas fa-sync-alt mr-2"></i>
                                    Retry Payment
                                </button>
                            <% } %>
                            <a href="/download-invoice/<%= order._id %>" 
                               class="flex items-center px-4 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100">
                                <i class="fas fa-download mr-2"></i>
                                Download Invoice
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include your existing JavaScript for payment handling -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        function returnProduct(orderId, productId) {
            Swal.fire({
                title: 'Return Product',
                text: 'Please provide a reason for returning the product',
                input: 'text',
                inputPlaceholder: 'Enter reason for return',
                showCancelButton: true,
                confirmButtonText: 'Submit Return',
                cancelButtonText: 'Cancel',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to provide a reason for return!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const reason = result.value;
                    fetch(`/orders/${orderId}/product/${productId}/return`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Return Initiated',
                                text: 'Your return request has been submitted successfully.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(data.message || 'Failed to process return');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to process your return request. Please try again.'
                        });
                    });
                }
            });
        }

        function cancelProduct(orderId, productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to cancel this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it',
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/orders/${orderId}/product/${productId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire(
                            'Cancelled!',
                            'Your product has been cancelled.',
                            'success'
                        ).then(() => {
                            window.location.reload();
                        });
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'There was an error cancelling your product.',
                            'error'
                        );
                    });
                }
            });
        }

        function retryPayment(orderId, amount) {
            fetch('/retry-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId, amount })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Failed to create payment order');
                    });
                }
                return response.json();
            })
            .then(data => {
                const options = {
                    key: data.key_id,
                    amount: data.amount,
                    currency: "INR",
                    name: "Sixit",
                    description: "Payment retry for order",
                    order_id: data.order_id,
                    handler: function (response) {
                        verifyRetryPayment(response, data.order);
                    },
                    prefill: {
                        name: data.user?.name || "",
                        email: data.user?.email || "",
                        contact: data.user?.mobile || ""
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
                
                rzp.on('payment.failed', function (response) {
                    console.error('Payment failed:', response.error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: response.error.description || 'Payment could not be processed'
                    });
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong'
                });
            });
        }

        function verifyRetryPayment(payment, order) {
            fetch('/verify-retry-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ payment, order })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Payment verification failed');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Payment Successful',
                        text: 'Your payment has been processed successfully'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.error || 'Payment verification failed');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Verification Failed',
                    text: error.message || 'Could not verify payment'
                });
            });
        }
    </script>
    
</body>
</html>