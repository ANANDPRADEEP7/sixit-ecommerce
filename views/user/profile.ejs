<%- include("../../views/partials/user/header") %>
<style>
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --background-color: #f8f9fa;
  --text-color: #2c3e50;
  --border-radius: 15px;
  --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  --transition: all 0.3s ease;
}

.main {
  padding: 30px 0;
  background-color: var(--background-color);
}

/* Dashboard Menu Styling */
.dashboard-menu {
  background: linear-gradient(145deg, #ffffff, #f0f0f0);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
}

.dashboard-menu .nav-link {
  font-weight: 500;
  color: var(--text-color);
  padding: 12px 20px;
  margin: 8px 0;
  border-radius: var(--border-radius);
  transition: var(--transition);
  display: flex;
  align-items: center;
  background: white;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.dashboard-menu .nav-link i {
  margin-right: 10px;
  font-size: 1.2em;
  color: var(--primary-color);
}

.dashboard-menu .nav-link:hover,
.dashboard-menu .nav-link.active {
  background: var(--primary-color);
  color: white;
  transform: translateY(-2px);
}

.dashboard-menu .nav-link:hover i,
.dashboard-menu .nav-link.active i {
  color: white;
}

/* Card Styling */
.card {
  border: none;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  overflow: hidden;
  transition: var(--transition);
  background: white;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
}

.card-header {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
  padding: 20px;
  border: none;
}

.card-body {
  padding: 25px;
}

/* Form Elements */
.form-control {
  border-radius: 10px;
  padding: 12px;
  border: 1px solid #e1e1e1;
  transition: var(--transition);
}

.form-control:focus {
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
  border-color: var(--primary-color);
}

/* Buttons */
.btn {
  padding: 12px 25px;
  border-radius: 10px;
  font-weight: 500;
  transition: var(--transition);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.btn-success {
  background: linear-gradient(135deg, var(--secondary-color), #27ae60);
  border: none;
  box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
}

.btn-success:hover {
  background: linear-gradient(135deg, #27ae60, var(--secondary-color));
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(46, 204, 113, 0.4);
}

/* Breadcrumb */
.breadcrumb-wrap {
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  padding: 15px 0;
  margin-bottom: 30px;
  border-radius: var(--border-radius);
}

.breadcrumb {
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
}

.breadcrumb a {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 500;
  transition: var(--transition);
}

.breadcrumb a:hover {
  color: var(--secondary-color);
}

.breadcrumb span {
  margin: 0 10px;
  color: #6c757d;
}

/* Profile Info */
.profile-info {
  text-align: center;
  padding: 20px;
}

.profile-info img {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  margin-bottom: 15px;
  border: 4px solid white;
  box-shadow: var(--box-shadow);
}

.profile-info h5 {
  color: var(--text-color);
  margin-bottom: 10px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .dashboard-menu {
    margin-bottom: 20px;
  }
  
  .card {
    margin-bottom: 20px;
  }
  
  .breadcrumb-wrap {
    padding: 10px 0;
  }
}

/* Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.dashboard-content {
  animation: fadeIn 0.5s ease-out;
}

/* Table Styling */
.table {
  margin-bottom: 0;
  background: white;
  border-radius: var(--border-radius);
}

.table th {
  border-bottom: 2px solid #dee2e6;
  padding: 12px;
  font-weight: 600;
  color: var(--text-color);
}

.table td {
  padding: 12px;
  vertical-align: middle;
}

/* Order Items Styling */
.order-items-container {
  background: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
  margin: 10px 0;
}

.order-items-container .table {
  background: transparent;
}

.order-items-container th {
  font-size: 0.9em;
  color: #6c757d;
  border-bottom: 1px solid #dee2e6;
}

.order-items-container td {
  font-size: 0.9em;
}

/* Status Badge Styling */
.badge {
  padding: 6px 12px;
  border-radius: 20px;
  font-weight: 500;
  font-size: 0.85em;
  margin-right: 5px;
  text-transform: capitalize;
}

.badge.pending {
  background-color: #ffc107;
  color: #000;
}

.badge.processing {
  background-color: #17a2b8;
  color: #fff;
}

.badge.shipped {
  background-color: #007bff;
  color: #fff;
}

.badge.delivered {
  background-color: #28a745;
  color: #fff;
}

.badge.cancelled {
  background-color: #dc3545;
  color: #fff;
}

.badge.returned {
  background-color: #6c757d;
  color: #fff;
}

/* Status Badges */
.badge {
  padding: 8px 12px;
  border-radius: 20px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.badge-success {
  background-color: var(--secondary-color);
  color: white;
}

.badge-warning {
  background-color: #f1c40f;
  color: white;
}

.badge-danger {
  background-color: #e74c3c;
  color: white;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #6c757d;
}

.form-group {
    position: relative;
}

.invalid-feedback {
    display: none;
}

.form-control.is-invalid + .invalid-feedback {
    display: block;
}
</style>
<main class="main">
 <div class="page-header breadcrumb-wrap mb-3">
   <div class="container">
     <div class="breadcrumb">
       <a href="/" rel="nofollow">Home</a>
       <span></span> <a href="/userProfile">Profile</a>
       <span></span> Account Settings
     </div>
   </div>
 </div>
  <section class="pt-10 pb-10">
   <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="change-password-tab" data-bs-toggle="tab" href="#change-password" role="tab" aria-controls="change-password" aria-selected="false">
                     <i class="fi-rs-key mr-10"></i>Change Password
                   </a>
                 </li>
                 <!-- <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li> -->
                 <!-- <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li> -->
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">


               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green">
                   <div class="card-header">
                     <h5 class="mb-0 text-center">User Profile</h5>
                   </div>
                   <div class="card-body text-center">
                     <h5 class="card-title"><%=user?.name%></h5>
                     <p class="card-text">
                       <strong>Phone:</strong><%=user?.phone%>
                     </p>
                     <p class="card-text">
                       <strong>Email:</strong><%=user?.email%>
                     </p>
                    
                     <!-- <a href="/change-password" class="btn btn-sm btn-success">Change Password</a> -->
                   </div>
                 </div>
               </div>


               <div
                 class="tab-pane fade"
                 id="address"
                 role="tabpanel"
                 aria-labelledby="address-tab"
               >
                 <div class="row">
                  <% if (userAddress && userAddress.address && userAddress.address.length > 0) { %>
                     <% userAddress.address.forEach((address) => { %>
                    <div class="col-lg-6">
                      <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"><%=address.addressType%></h5>
                       </div>


                       <div class="card-body">
                         <address>
                        <%=address.name%><br/>
                        <%=address.city%><br/>
                        <%=address.landMark%><br/>
                        <%=address.state%><br/>                     
                         </address>
                         <p><%=address.pincode%></p>
                         <p><%=address.phone%></p>
                         <p><%=address.altPhone%></p>
                         
                      
                         <div class="d-flex justify-content-between">
                           <a href="/editAddress?id=<%=address._id%>" class="btn-small">Edit</a>
                           <a href="/deleteAddress?id=<%=address._id%>" class="btn-small" onclick="return confirm(`Are you sure you want to delete this address?`)">Delete</a>
                         </div>
                        
                       </div>
                     </div>
                   </div>
                   <% }) %>
                   <% } else { %>
                   <div class="col-lg-6">
                     <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"></h5>
                       </div>
                       <div class="card-body">
                         <address>No address</address>
                       </div>
                     </div>
                   </div>
                   <% } %>
                   <div>
                     <a href="/addAddress">
                       <button class="btn btn-primary w-70">
                         Add address
                       </button>
                     </a>
                   </div>

                 </div>
               </div>
               


               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">Your Orders</h5>
                  </div>
                  <div class="card-body">
                    <div class="table-responsive">
                      <table class="table" id="orders-table">
                        <thead>
                          <tr>
                            <th>No.</th>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody id="orders-tbody">
                          <% orderData.forEach((order, index) => { %>
                            <tr>
                              <td><%= index + 1 %></td>
                              <td><%= order._id %></td>
                              <td><%= new Date(order.createdOn).toLocaleString() %></td>
                              <td>₹<%= parseFloat(order.finalAmount).toLocaleString() %></td>
                              <td>
                                <% 
                                  const statuses = order.orderedItems.map(item => item.status);
                                  const uniqueStatuses = [...new Set(statuses)];
                                %>
                                <% uniqueStatuses.forEach(status => { %>
                                  <span class="badge <%= status.toLowerCase() %>"><%= status %></span>
                                <% }) %>
                              </td>
                              <td>
                                <a href="/order-details/<%= order._id %>" class="btn btn-info btn-sm">View Details</a>
                              </td>
                            </tr>
                            <tr class="order-items">
                              <td colspan="6">
                                <div class="order-items-container">
                                  <table class="table table-sm mb-0">
                                    <thead>
                                      <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <% order.orderedItems.forEach(item => { %>
                                        <tr>
                                          <td><%= item.name %></td>
                                          <td><%= item.quantity %></td>
                                          <td><%= item.status %></td>
                                          <td>
                                            <% if (item.status === 'pending') { %>
                                              <form action="javascript:void(0)" style="display:inline;">
                                                <button type="button" class="btn btn-danger btn-sm" 
                                                        onclick="cancelProduct('<%= order._id %>', '<%= item.id._id %>')">
                                                  Cancel
                                                </button>
                                              </form>
                                            <% } %>
                                          </td>
                                        </tr>
                                      <% }) %>
                                    </tbody>
                                  </table>
                                </div>
                              </td>
                            </tr>
                          <% }) %>
                        </tbody>
                      </table>
                      <% if (typeof totalPages !== 'undefined' && totalPages > 1) { %>
                        <div class="mt-4">
                          <nav aria-label="Orders pagination">
                            <ul class="pagination justify-content-center">
                              <% if (currentPage > 1) { %>
                                <li class="page-item">
                                  <a class="page-link" href="#" onclick="loadOrders(<%= currentPage - 1 %>); return false;">&laquo;</a>
                                </li>
                              <% } %>
                              <% for(let i = 1; i <= totalPages; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                  <a class="page-link" href="#" onclick="loadOrders(<%= i %>); return false;"><%= i %></a>
                                </li>
                              <% } %>
                              <% if (currentPage < totalPages) { %>
                                <li class="page-item">
                                  <a class="page-link" href="#" onclick="loadOrders(<%= currentPage + 1 %>); return false;">&raquo;</a>
                                </li>
                              <% } %>
                            </ul>
                          </nav>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>

              <script>
              function loadOrders(page) {
                fetch('/api/orders?page=' + page)
                  .then(response => response.json())
                  .then(data => {
                    const tbody = document.querySelector('#orders-tbody');
                    tbody.innerHTML = '';
                    
                    data.orders.forEach((order, index) => {
                      const startIndex = (data.currentPage - 1) * data.ordersPerPage;
                      const serialNumber = startIndex + index + 1;
                      
                      const tr = document.createElement('tr');
                      tr.innerHTML = `
                        <td>${serialNumber}</td>
                        <td>${order._id}</td>
                        <td>${new Date(order.createdOn).toLocaleString()}</td>
                        <td>₹${parseFloat(order.finalAmount).toLocaleString()}</td>
                        <td>
                          ${order.orderedItems.map(item => `<span class="badge ${item.status.toLowerCase()}">${item.status}</span>`).join(' ')}
                        </td>
                        <td>
                          <a href="/order-details/${order._id}" class="btn btn-info btn-sm">View Details</a>
                        </td>
                      `;
                      tbody.appendChild(tr);

                      const orderItemsTr = document.createElement('tr');
                      orderItemsTr.className = 'order-items';
                      orderItemsTr.innerHTML = `
                        <td colspan="6">
                          <div class="order-items-container">
                            <table class="table table-sm mb-0">
                              <thead>
                                <tr>
                                  <th>Product</th>
                                  <th>Quantity</th>
                                  <th>Status</th>
                                  <th>Actions</th>
                                </tr>
                              </thead>
                              <tbody>
                                ${order.orderedItems.map(item => `
                                  <tr>
                                    <td>${item.name}</td>
                                    <td>${item.quantity}</td>
                                    <td>${item.status}</td>
                                    <td>
                                      ${item.status === 'pending' ? `
                                        <form action="javascript:void(0)" style="display:inline;">
                                          <button type="button" class="btn btn-danger btn-sm" 
                                                  onclick="cancelProduct('${order._id}', '${item.id._id}')">
                                            Cancel
                                          </button>
                                        </form>
                                      ` : ''}
                                    </td>
                                  </tr>
                                `).join('')}
                              </tbody>
                            </table>
                          </div>
                        </td>
                      `;
                      tbody.appendChild(orderItemsTr);
                    });

                    // Update pagination UI
                    const paginationNav = document.querySelector('#orders nav');
                    if (paginationNav) {
                      const ul = paginationNav.querySelector('ul');
                      ul.innerHTML = '';
                      
                      if (data.currentPage > 1) {
                        ul.innerHTML += `
                          <li class="page-item">
                            <a class="page-link" href="#" onclick="loadOrders(${data.currentPage - 1}); return false;">&laquo;</a>
                          </li>
                        `;
                      }
                      
                      for(let i = 1; i <= data.totalPages; i++) {
                        ul.innerHTML += `
                          <li class="page-item ${data.currentPage === i ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="loadOrders(${i}); return false;">${i}</a>
                          </li>
                        `;
                      }
                      
                      if (data.currentPage < data.totalPages) {
                        ul.innerHTML += `
                          <li class="page-item">
                            <a class="page-link" href="#" onclick="loadOrders(${data.currentPage + 1}); return false;">&raquo;</a>
                          </li>
                        `;
                      }
                    }
                  })
                  .catch(error => {
                    console.error('Error loading orders:', error);
                  });
              }
              </script>
               <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet</h5>
                   </div>
                   <div class="card-body contact-from-area">
                     <div class="row">
                       <div class="col-lg-8 mx-auto text-center mt-90">
                         <form id="addMoneyForm">
                           <div class="form-group">
                             <label for="walletAmount" class="h4">Current Balance</label>
                             <div class="h3">₹<%= wallet.balance.toFixed(2) %></div>
                           </div>
                           <div class="form-group">
                             <!-- <label for="amount">Add Money</label> -->
                             <!-- <input type="number" id="amount" name="amount" class="form-control" min="1" step="1" required> -->
                           </div>
                           <!-- <button type="submit" class="btn btn-success">Add Money</button> -->
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet History</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Date</th>
                             <th>Type</th>
                             <th>Description</th>
                             <th>Amount</th>
                             <th>Balance</th>
                           </tr>
                         </thead>
                         <tbody>
                           <% if (walletHistory && walletHistory.length > 0) { %>
                             <% walletHistory.forEach(transaction => { %>
                               <tr>
                                 <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                                 <td>
                                   <% if (transaction.type === 'credit') { %>
                                     <span class="text-success">Credit</span>
                                   <% } else { %>
                                     <span class="text-danger">Debit</span>
                                   <% } %>
                                 </td>
                                 <td><%= transaction.description %></td>
                                 <td>
                                   <% if (transaction.type === 'credit') { %>
                                     <span class="text-success">+₹<%= transaction.amount.toFixed(2) %></span>
                                   <% } else { %>
                                     <span class="text-danger">-₹<%= transaction.amount.toFixed(2) %></span>
                                   <% } %>
                                 </td>
                                 <td>₹<%= transaction.balance.toFixed(2) %></td>
                               </tr>
                             <% }); %>
                           <% } else { %>
                             <tr>
                               <td colspan="5" class="text-center">No transactions yet</td>
                             </tr>
                           <% } %>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="change-password" role="tabpanel" aria-labelledby="change-password-tab">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Change Password</h5>
                    </div>
                    <div class="card-body">
                      <form id="changePasswordForm" class="needs-validation" novalidate>
                        <div class="row">
                          <div class="form-group col-md-12 mb-3">
                            <label for="current-password" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="current-password" name="currentPassword" required 
                              minlength="8" pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$">
                            <div class="invalid-feedback">
                              Please enter your current password
                            </div>
                          </div>
                          
                          <div class="form-group col-md-12 mb-3">
                            <label for="new-password" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="new-password" name="newPassword" required 
                              minlength="8" pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$">
                            <div class="invalid-feedback">
                              Password must be at least 8 characters long and include uppercase, lowercase, number, and special character
                            </div>
                            <small class="text-muted">Password must contain at least 8 characters, including uppercase, lowercase, number, and special character</small>
                          </div>
                          
                          <div class="form-group col-md-12 mb-3">
                            <label for="confirm-password" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirm-password" name="confirmPassword" required>
                            <div class="invalid-feedback">
                              Passwords do not match
                            </div>
                          </div>
                          
                          <div class="col-md-12">
                            <button type="submit" class="btn btn-success" id="updatePasswordBtn">Update Password</button>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>

           
       </div>
     </div>
   </div>
 </section>
</main>
<%-include("../../views/partials/user/footer")%>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
 function cancelProduct(orderId, productId) {
  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to cancel this product?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, cancel it!',
    cancelButtonText: 'No, keep it',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/orders/${orderId}/product/${productId}/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            Swal.fire(
              'Canceled!',
              'The product has been canceled.',
              'success'
            ).then(() => {
              location.reload();
            });
          } else {
            throw new Error(data.message || 'Failed to cancel the order');
          }
        })
        .catch(error => {
          console.error('Error canceling product:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong. Please try again.',
            confirmButtonText: 'OK'
          });
        });
    }
  });
}

// Wallet functionality
document.getElementById('addMoneyForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const amount = document.getElementById('amount').value;

    try {
        // Create order
        const response = await fetch('/add-money-to-wallet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const result = await response.json();

        if (result.success) {
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: amount * 100,
                currency: "INR",
                name: "SIXIT",
                description: "Add money to wallet",
                order_id: result.order.id,
                handler: async function (response) {
                    try {
                        const verifyResponse = await fetch('/verify-wallet-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                amount: amount
                            })
                        });

                        const verifyResult = await verifyResponse.json();

                        if (verifyResult.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Money added to wallet successfully'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(verifyResult.message);
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to verify payment'
                        });
                    }
                },
                prefill: {
                    name: "<%= user.name %>",
                    email: "<%= user.email %>",
                    contact: "<%= user.phone %>"
                },
                theme: {
                    color: "#3399cc"
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();

        } else {
            throw new Error(result.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to process payment'
        });
    }
});

$(document).ready(function() {
    // Password validation function
    function validatePassword(password) {
        const minLength = 8;
        const hasUpperCase = /[A-Z]/.test(password);
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /\d/.test(password);
        const hasSpecialChar = /[@$!%*?&]/.test(password);
        
        return password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar;
    }

    // Form validation
    $('#changePasswordForm').on('submit', function(e) {
        e.preventDefault();
        
        const currentPassword = $('#current-password').val().trim();
        const newPassword = $('#new-password').val().trim();
        const confirmPassword = $('#confirm-password').val().trim();
        
        // Reset previous error states
        $(this).removeClass('was-validated');
        $('.is-invalid').removeClass('is-invalid');
        
        let isValid = true;
        
        // Validate current password
        if (!currentPassword) {
            $('#current-password').addClass('is-invalid');
            isValid = false;
        }
        
        // Validate new password
        if (!validatePassword(newPassword)) {
            $('#new-password').addClass('is-invalid');
            isValid = false;
        }
        
        // Validate confirm password
        if (newPassword !== confirmPassword) {
            $('#confirm-password').addClass('is-invalid');
            isValid = false;
        }
        
        if (!isValid) {
            return false;
        }
        
        // Disable submit button to prevent double submission
        $('#updatePasswordBtn').prop('disabled', true);
        
        // Send AJAX request
        $.ajax({
            url: '/update-password',
            method: 'POST',
            data: {
                currentPassword: currentPassword,
                newPassword: newPassword,
                confirmPassword: confirmPassword
            },
            success: function(response) {
                if (response.status) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Password updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        // Clear the form
                        $('#changePasswordForm')[0].reset();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message || 'Failed to update password'
                    });
                }
            },
            error: function() {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.'
                });
            },
            complete: function() {
                // Re-enable submit button
                $('#updatePasswordBtn').prop('disabled', false);
            }
        });
    });

    // Show/hide password toggle
    $('.form-group').append('<span class="password-toggle"><i class="fi-rs-eye"></i></span>');
    
    $('.password-toggle').click(function() {
        const input = $(this).siblings('input');
        const icon = $(this).find('i');
        
        if (input.attr('type') === 'password') {
            input.attr('type', 'text');
            icon.removeClass('fi-rs-eye').addClass('fi-rs-eye-crossed');
        } else {
            input.attr('type', 'password');
            icon.removeClass('fi-rs-eye-crossed').addClass('fi-rs-eye');
        }
    });
});
</script>
